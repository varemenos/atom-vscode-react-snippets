".source.js, .source.js.jsx":
  reactClassCompoment:
    prefix: "rcc"
    description: "Creates a React component class with ES6 module system"
    body: '''
      import React, {Component} from 'react';
      
      class ${1:componentName} extends Component {
      	render() {
      		return (
      			<div>
      				$0
      			</div>
      		);
      	}
      }
      
      export default ${1:componentName};
    '''
  reactJustClassCompoment:
    prefix: "rcjc"
    description: "Creates a React component class with ES6 module system"
    body: '''
      class ${1:componentName} extends Component {
      	render() {
      		return (
      			<div>
      				$0
      			</div>
      		);
      	}
      }
      
    '''
  reactClassCompomentPropTypes:
    prefix: "rccp"
    description: "Creates a React component class with PropTypes and ES6 module system"
    body: '''
      import React, {Component, PropTypes} from 'react';
      
      class ${1:componentName} extends Component {
      	render() {
      		return (
      			<div>
      				$0
      			</div>
      		);
      	}
      }
      
      ${1:componentName}.propTypes = {
      
      };
      
      export default ${1:componentName};
    '''
  reactClassCompomentWithMethods:
    prefix: "rcfc"
    description: "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system"
    body: '''
      import React, {Component, PropTypes} from 'react';
      
      class ${1:componentName} extends Component {
      	constructor(props) {
      		super(props);
      
      	}
      
      	componentWillMount() {
      
      	}
      
      	componentDidMount() {
      
      	}
      
      	componentWillReceiveProps(nextProps) {
      
      	}
      
      	shouldComponentUpdate(nextProps, nextState) {
      
      	}
      
      	componentWillUpdate(nextProps, nextState) {
      
      	}
      
      	componentDidUpdate(prevProps, prevState) {
      
      	}
      
      	componentWillUnmount() {
      
      	}
      
      	render() {
      		return (
      			<div>
      
      			</div>
      		);
      	}
      }
      
      ${1:componentName}.propTypes = {
      
      };
      
      export default ${1:componentName};
    '''
  reactStateless:
    prefix: "rsc"
    description: "Creates a stateless React component without PropTypes and ES6 module system"
    body: '''
      import React from 'react';
      
      const ${1:componentName} = () => {
      	return (
      		<div>
      			$0
      		</div>
      	);
      };
      
      export default ${1:componentName};
    '''
  reactStatelessProps:
    prefix: "rscp"
    description: "Creates a stateless React component with PropTypes and ES6 module system"
    body: '''
      import React, {PropTypes} from 'react';
      
      const ${1:componentName} = props => {
      	return (
      		<div>
      			
      		</div>
      	);
      };
      
      ${1:componentName}.propTypes = {
      	$0
      };
      
      export default ${1:componentName};
    '''
  classConstructor:
    prefix: "con"
    description: "Adds a default constructor for the class that contains props as arguments"
    body: '''
      constructor(props) {
      	super(props);
      	$0
      }
      
    '''
  classConstructorContext:
    prefix: "conc"
    description: "Adds a default constructor for the class that contains props and context as arguments"
    body: '''
      constructor(props, context) {
      	super(props, context);
      	$0
      }
      
    '''
  emptyState:
    prefix: "est"
    description: "Creates empty state object. To be used in a constructor."
    body: '''
      this.state = {
      	$1
      };
    '''
  componentWillMount:
    prefix: "cwm"
    description: "Invoked once, both on the client and server, immediately before the initial rendering occurs"
    body: '''
      
      componentWillMount() {
      	$0
      }
      
    '''
  componentDidMount:
    prefix: "cdm"
    description: "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
    body: '''
      componentDidMount() {
      	$0
      }
      
    '''
  componentWillReceiveProps:
    prefix: "cwr"
    description: "Invoked when a component is receiving new props. This method is not called for the initial render."
    body: '''
      componentWillReceiveProps(nextProps) {
      	$0
      }
      
    '''
  shouldComponentUpdate:
    prefix: "scu"
    description: "Invoked before rendering when new props or state are being received. "
    body: '''
      shouldComponentUpdate(nextProps, nextState) {
      	$0
      }
      
    '''
  componentWillUpdate:
    prefix: "cwup"
    description: "Invoked immediately before rendering when new props or state are being received."
    body: '''
      componentWillUpdate(nextProps, nextState) {
      	$0
      }
      
    '''
  componentDidUpdate:
    prefix: "cdup"
    description: "Invoked immediately after the component's updates are flushed to the DOM."
    body: '''
      componentDidUpdate(prevProps, prevState) {
      	$0
      }
      
    '''
  componentWillUnmount:
    prefix: "cwun"
    description: "Invoked immediately before a component is unmounted from the DOM."
    body: '''
      componentWillUnmount() {
      	$0
      }
      
    '''
  componentRender:
    prefix: "ren"
    description: "When called, it should examine this.props and this.state and return a single child element."
    body: '''
      render() {
      	return (
      		<div>
      			$0
      		</div>
      	);
      }
    '''
  componentSetStateObject:
    prefix: "sst"
    description: "Performs a shallow merge of nextState into current state"
    body: "this.setState($0);"
  componentSetStateFunc:
    prefix: "ssf"
    description: "Performs a shallow merge of nextState into current state"
    body: '''
      this.setState((state, props) => { return { $0 }});
      
    '''
  componentProps:
    prefix: "props"
    description: "Access component's props"
    body: "this.props.$0"
  componentState:
    prefix: "state"
    description: "Access component's state"
    body: "this.state.$0"
  bindThis:
    prefix: "bnd"
    description: "Binds the this of a method. To be used inside a constructor"
    body: "this.$1 = this.$1.bind(this);$0"
  propTypes:
    prefix: "rpt"
    description: "Creates empty propTypes declaration"
    body: '''
      $1.propTypes = {
      	$2
      };
    '''
  propTypeArray:
    prefix: "pta"
    description: "Array prop type"
    body: "PropTypes.array,"
  propTypeArrayRequired:
    prefix: "ptar"
    description: "Array prop type required"
    body: "PropTypes.array.isRequired,"
  propTypeBool:
    prefix: "ptb"
    description: "Bool prop type"
    body: "PropTypes.bool,"
  propTypeBoolRequired:
    prefix: "ptbr"
    description: "Bool prop type required"
    body: "PropTypes.bool.isRequired,"
  propTypeFunc:
    prefix: "ptf"
    description: "Func prop type"
    body: "PropTypes.func,"
  propTypeFuncRequired:
    prefix: "ptfr"
    description: "Func prop type required"
    body: "PropTypes.func.isRequired,"
  propTypeNumber:
    prefix: "ptn"
    description: "Number prop type"
    body: "PropTypes.number,"
  propTypeNumberRequired:
    prefix: "ptnr"
    description: "Number prop type required"
    body: "PropTypes.number.isRequired,"
  propTypeObject:
    prefix: "pto"
    description: "Object prop type"
    body: "PropTypes.object,"
  propTypeObjectRequired:
    prefix: "ptor"
    description: "Object prop type required"
    body: "PropTypes.object.isRequired,"
  propTypeString:
    prefix: "pts"
    description: "String prop type"
    body: "PropTypes.string,"
  propTypeStringRequired:
    prefix: "ptsr"
    description: "String prop type required"
    body: "PropTypes.string.isRequired,"
  propTypeNode:
    prefix: "ptnd"
    description: "Anything that can be rendered: numbers, strings, elements or an array"
    body: "PropTypes.node,"
  propTypeNodeRequired:
    prefix: "ptndr"
    description: "Anything that can be rendered: numbers, strings, elements or an array required"
    body: "PropTypes.node.isRequired,"
  propTypeElement:
    prefix: "ptel"
    description: "React element prop type"
    body: "PropTypes.element,"
  propTypeElementRequired:
    prefix: "ptelr"
    description: "React element prop type required"
    body: "PropTypes.element.isRequired,"
  propTypeInstanceOf:
    prefix: "pti"
    description: "Is an instance of a class prop type"
    body: "PropTypes.instanceOf($0),"
  propTypeInstanceOfRequired:
    prefix: "ptir"
    description: "Is an instance of a class prop type required"
    body: "PropTypes.instanceOf($0).isRequired,"
  propTypeEnum:
    prefix: "pte"
    description: "Prop type limited to specific values by treating it as an enum"
    body: "PropTypes.oneOf(['$0']),"
  propTypeEnumRequired:
    prefix: "pter"
    description: "Prop type limited to specific values by treating it as an enum required"
    body: "PropTypes.oneOf(['$0']).isRequired,"
  propTypeOneOfType:
    prefix: "ptet"
    description: "An object that could be one of many types"
    body: '''
      PropTypes.oneOfType([
      	$0
      ]),
    '''
  propTypeOneOfTypeRequired:
    prefix: "ptetr"
    description: "An object that could be one of many types required"
    body: '''
      PropTypes.oneOfType([
      	$0
      ]).isRequired,
    '''
  propTypeArrayOf:
    prefix: "ptao"
    description: "An array of a certain type"
    body: "PropTypes.arrayOf($0),"
  propTypeArrayOfRequired:
    prefix: "ptaor"
    description: "An array of a certain type required"
    body: "PropTypes.arrayOf($0).isRequired,"
  propTypeObjectOf:
    prefix: "ptoo"
    description: "An object with property values of a certain type"
    body: "PropTypes.objectOf($0),"
  propTypeObjectOfRequired:
    prefix: "ptoor"
    description: "An object with property values of a certain type required"
    body: "PropTypes.objectOf($0).isRequired,"
  propTypeShape:
    prefix: "ptsh"
    description: "An object taking on a particular shape"
    body: '''
      PropTypes.shape({
      	$0
      }),
    '''
  propTypeShapeRequired:
    prefix: "ptshr"
    description: "An object taking on a particular shape required"
    body: '''
      PropTypes.shape({
      	$0
      }).isRequired,
    '''